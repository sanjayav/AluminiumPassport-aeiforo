/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app.index'
import { Route as AppRolesRouteImport } from './routes/app.roles'
import { Route as AppRefinerRouteImport } from './routes/app.refiner'
import { Route as AppMinerRouteImport } from './routes/app.miner'
import { Route as AppRefinerCreateRouteImport } from './routes/app.refiner.create'
import { Route as AppImporterMarketRouteImport } from './routes/app.importer.market'
import { Route as AppImporterIncomingRouteImport } from './routes/app.importer.incoming'
import { Route as AppAuditorReviewRouteImport } from './routes/app.auditor.review'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppRolesRoute = AppRolesRouteImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => AppRoute,
} as any)
const AppRefinerRoute = AppRefinerRouteImport.update({
  id: '/refiner',
  path: '/refiner',
  getParentRoute: () => AppRoute,
} as any)
const AppMinerRoute = AppMinerRouteImport.update({
  id: '/miner',
  path: '/miner',
  getParentRoute: () => AppRoute,
} as any)
const AppRefinerCreateRoute = AppRefinerCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => AppRefinerRoute,
} as any)
const AppImporterMarketRoute = AppImporterMarketRouteImport.update({
  id: '/importer/market',
  path: '/importer/market',
  getParentRoute: () => AppRoute,
} as any)
const AppImporterIncomingRoute = AppImporterIncomingRouteImport.update({
  id: '/importer/incoming',
  path: '/importer/incoming',
  getParentRoute: () => AppRoute,
} as any)
const AppAuditorReviewRoute = AppAuditorReviewRouteImport.update({
  id: '/auditor/review',
  path: '/auditor/review',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/app/miner': typeof AppMinerRoute
  '/app/refiner': typeof AppRefinerRouteWithChildren
  '/app/roles': typeof AppRolesRoute
  '/app/': typeof AppIndexRoute
  '/app/auditor/review': typeof AppAuditorReviewRoute
  '/app/importer/incoming': typeof AppImporterIncomingRoute
  '/app/importer/market': typeof AppImporterMarketRoute
  '/app/refiner/create': typeof AppRefinerCreateRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/app/miner': typeof AppMinerRoute
  '/app/refiner': typeof AppRefinerRouteWithChildren
  '/app/roles': typeof AppRolesRoute
  '/app': typeof AppIndexRoute
  '/app/auditor/review': typeof AppAuditorReviewRoute
  '/app/importer/incoming': typeof AppImporterIncomingRoute
  '/app/importer/market': typeof AppImporterMarketRoute
  '/app/refiner/create': typeof AppRefinerCreateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/app/miner': typeof AppMinerRoute
  '/app/refiner': typeof AppRefinerRouteWithChildren
  '/app/roles': typeof AppRolesRoute
  '/app/': typeof AppIndexRoute
  '/app/auditor/review': typeof AppAuditorReviewRoute
  '/app/importer/incoming': typeof AppImporterIncomingRoute
  '/app/importer/market': typeof AppImporterMarketRoute
  '/app/refiner/create': typeof AppRefinerCreateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/login'
    | '/app/miner'
    | '/app/refiner'
    | '/app/roles'
    | '/app/'
    | '/app/auditor/review'
    | '/app/importer/incoming'
    | '/app/importer/market'
    | '/app/refiner/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/app/miner'
    | '/app/refiner'
    | '/app/roles'
    | '/app'
    | '/app/auditor/review'
    | '/app/importer/incoming'
    | '/app/importer/market'
    | '/app/refiner/create'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/login'
    | '/app/miner'
    | '/app/refiner'
    | '/app/roles'
    | '/app/'
    | '/app/auditor/review'
    | '/app/importer/incoming'
    | '/app/importer/market'
    | '/app/refiner/create'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/roles': {
      id: '/app/roles'
      path: '/roles'
      fullPath: '/app/roles'
      preLoaderRoute: typeof AppRolesRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/refiner': {
      id: '/app/refiner'
      path: '/refiner'
      fullPath: '/app/refiner'
      preLoaderRoute: typeof AppRefinerRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/miner': {
      id: '/app/miner'
      path: '/miner'
      fullPath: '/app/miner'
      preLoaderRoute: typeof AppMinerRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/refiner/create': {
      id: '/app/refiner/create'
      path: '/create'
      fullPath: '/app/refiner/create'
      preLoaderRoute: typeof AppRefinerCreateRouteImport
      parentRoute: typeof AppRefinerRoute
    }
    '/app/importer/market': {
      id: '/app/importer/market'
      path: '/importer/market'
      fullPath: '/app/importer/market'
      preLoaderRoute: typeof AppImporterMarketRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/importer/incoming': {
      id: '/app/importer/incoming'
      path: '/importer/incoming'
      fullPath: '/app/importer/incoming'
      preLoaderRoute: typeof AppImporterIncomingRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/auditor/review': {
      id: '/app/auditor/review'
      path: '/auditor/review'
      fullPath: '/app/auditor/review'
      preLoaderRoute: typeof AppAuditorReviewRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRefinerRouteChildren {
  AppRefinerCreateRoute: typeof AppRefinerCreateRoute
}

const AppRefinerRouteChildren: AppRefinerRouteChildren = {
  AppRefinerCreateRoute: AppRefinerCreateRoute,
}

const AppRefinerRouteWithChildren = AppRefinerRoute._addFileChildren(
  AppRefinerRouteChildren,
)

interface AppRouteChildren {
  AppMinerRoute: typeof AppMinerRoute
  AppRefinerRoute: typeof AppRefinerRouteWithChildren
  AppRolesRoute: typeof AppRolesRoute
  AppIndexRoute: typeof AppIndexRoute
  AppAuditorReviewRoute: typeof AppAuditorReviewRoute
  AppImporterIncomingRoute: typeof AppImporterIncomingRoute
  AppImporterMarketRoute: typeof AppImporterMarketRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppMinerRoute: AppMinerRoute,
  AppRefinerRoute: AppRefinerRouteWithChildren,
  AppRolesRoute: AppRolesRoute,
  AppIndexRoute: AppIndexRoute,
  AppAuditorReviewRoute: AppAuditorReviewRoute,
  AppImporterIncomingRoute: AppImporterIncomingRoute,
  AppImporterMarketRoute: AppImporterMarketRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
